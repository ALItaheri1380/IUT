
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000432  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000432  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078a  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000679  00000000  00000000  00000cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bd  00000000  00000000  00001363  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001620  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017a  00000000  00000000  00001a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001ba7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  7a:	0c 94 17 02 	jmp	0x42e	; 0x42e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:

void display_on_segment(int digit, int position) {
	if (position == 0) {
		PORTD = segment_digits[digit];
		} else if (position == 1) {
		PORTC = segment_digits[digit];
  82:	80 ec       	ldi	r24, 0xC0	; 192
  84:	87 b9       	out	0x07, r24	; 7
  86:	87 ea       	ldi	r24, 0xA7	; 167
  88:	86 b9       	out	0x06, r24	; 6
  8a:	08 95       	ret

0000008c <ADC_read>:
  8c:	97 b1       	in	r25, 0x07	; 7
  8e:	90 7f       	andi	r25, 0xF0	; 240
  90:	8f 70       	andi	r24, 0x0F	; 15
  92:	89 2b       	or	r24, r25
  94:	87 b9       	out	0x07, r24	; 7
  96:	36 9a       	sbi	0x06, 6	; 6
  98:	36 99       	sbic	0x06, 6	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <ADC_read+0xc>
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	08 95       	ret

000000a2 <main>:
	}
}

int main(void) {
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	28 97       	sbiw	r28, 0x08	; 8
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
	int sensor_values[MAX_SENSORS];
	int max_temp = 0;
	int i, max_digit_ones, max_digit_tens;

	DDRC = 0xFF;  
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;  
  ba:	81 bb       	out	0x11, r24	; 17
	DDRA = 0x00;  
  bc:	1a ba       	out	0x1a, r1	; 26

	ADC_init();
  be:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
	return ADC; 
}

void display_on_segment(int digit, int position) {
	if (position == 0) {
		PORTD = segment_digits[digit];
  c2:	0f 2e       	mov	r0, r31
  c4:	fa e0       	ldi	r31, 0x0A	; 10
  c6:	cf 2e       	mov	r12, r31
  c8:	d1 2c       	mov	r13, r1
  ca:	f0 2d       	mov	r31, r0
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	7c 01       	movw	r14, r24

	while (1) {

		
		
		for (i = 0; i < MAX_SENSORS; i++) {
  d2:	00 e0       	ldi	r16, 0x00	; 0
  d4:	10 e0       	ldi	r17, 0x00	; 0
			sensor_values[i] = ADC_read(i + 1); 
  d6:	0f 5f       	subi	r16, 0xFF	; 255
  d8:	1f 4f       	sbci	r17, 0xFF	; 255
  da:	c8 01       	movw	r24, r16
  dc:	0e 94 46 00 	call	0x8c	; 0x8c <ADC_read>
  e0:	f7 01       	movw	r30, r14
  e2:	81 93       	st	Z+, r24
  e4:	91 93       	st	Z+, r25
  e6:	7f 01       	movw	r14, r30

	while (1) {

		
		
		for (i = 0; i < MAX_SENSORS; i++) {
  e8:	04 30       	cpi	r16, 0x04	; 4
  ea:	11 05       	cpc	r17, r1
  ec:	a1 f7       	brne	.-24     	; 0xd6 <main+0x34>
		}

		
		max_temp = sensor_values[0];
		for (i = 1; i < MAX_SENSORS; i++) {
			if (sensor_values[i] > max_temp) {
  ee:	2b 81       	ldd	r18, Y+3	; 0x03
  f0:	3c 81       	ldd	r19, Y+4	; 0x04
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
  f6:	82 17       	cp	r24, r18
  f8:	93 07       	cpc	r25, r19
  fa:	0c f4       	brge	.+2      	; 0xfe <main+0x5c>
  fc:	c9 01       	movw	r24, r18
  fe:	2d 81       	ldd	r18, Y+5	; 0x05
 100:	3e 81       	ldd	r19, Y+6	; 0x06
 102:	82 17       	cp	r24, r18
 104:	93 07       	cpc	r25, r19
 106:	0c f4       	brge	.+2      	; 0x10a <main+0x68>
 108:	c9 01       	movw	r24, r18
 10a:	6f 81       	ldd	r22, Y+7	; 0x07
 10c:	78 85       	ldd	r23, Y+8	; 0x08
				max_temp = sensor_values[i];
			}
		}

		
		int temperature = (max_temp * 2.56 * 100) / 1024 ; 
 10e:	68 17       	cp	r22, r24
 110:	79 07       	cpc	r23, r25
 112:	0c f4       	brge	.+2      	; 0x116 <main+0x74>
 114:	bc 01       	movw	r22, r24
 116:	07 2e       	mov	r0, r23
 118:	00 0c       	add	r0, r0
 11a:	88 0b       	sbc	r24, r24
 11c:	99 0b       	sbc	r25, r25
 11e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__floatsisf>
 122:	2a e0       	ldi	r18, 0x0A	; 10
 124:	37 ed       	ldi	r19, 0xD7	; 215
 126:	43 e2       	ldi	r20, 0x23	; 35
 128:	50 e4       	ldi	r21, 0x40	; 64
 12a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__mulsf3>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	48 ec       	ldi	r20, 0xC8	; 200
 134:	52 e4       	ldi	r21, 0x42	; 66
 136:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__mulsf3>
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	40 e8       	ldi	r20, 0x80	; 128
 140:	5a e3       	ldi	r21, 0x3A	; 58
 142:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__mulsf3>
 146:	0e 94 be 00 	call	0x17c	; 0x17c <__fixsfsi>
	return ADC; 
}

void display_on_segment(int digit, int position) {
	if (position == 0) {
		PORTD = segment_digits[digit];
 14a:	cb 01       	movw	r24, r22
 14c:	b6 01       	movw	r22, r12
 14e:	0e 94 ef 01 	call	0x3de	; 0x3de <__divmodhi4>
 152:	fc 01       	movw	r30, r24
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	e0 5a       	subi	r30, 0xA0	; 160
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	80 81       	ld	r24, Z
 15e:	82 bb       	out	0x12, r24	; 18
		} else if (position == 1) {
		PORTC = segment_digits[digit];
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	fb 01       	movw	r30, r22
 166:	e0 5a       	subi	r30, 0xA0	; 160
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	80 81       	ld	r24, Z
 16c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16e:	83 ec       	ldi	r24, 0xC3	; 195
 170:	99 e0       	ldi	r25, 0x09	; 9
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0xd0>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0xd6>
 178:	00 00       	nop
 17a:	a8 cf       	rjmp	.-176    	; 0xcc <main+0x2a>

0000017c <__fixsfsi>:
 17c:	0e 94 c5 00 	call	0x18a	; 0x18a <__fixunssfsi>
 180:	68 94       	set
 182:	b1 11       	cpse	r27, r1
 184:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__fp_szero>
 188:	08 95       	ret

0000018a <__fixunssfsi>:
 18a:	0e 94 39 01 	call	0x272	; 0x272 <__fp_splitA>
 18e:	88 f0       	brcs	.+34     	; 0x1b2 <__fixunssfsi+0x28>
 190:	9f 57       	subi	r25, 0x7F	; 127
 192:	98 f0       	brcs	.+38     	; 0x1ba <__fixunssfsi+0x30>
 194:	b9 2f       	mov	r27, r25
 196:	99 27       	eor	r25, r25
 198:	b7 51       	subi	r27, 0x17	; 23
 19a:	b0 f0       	brcs	.+44     	; 0x1c8 <__fixunssfsi+0x3e>
 19c:	e1 f0       	breq	.+56     	; 0x1d6 <__fixunssfsi+0x4c>
 19e:	66 0f       	add	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	88 1f       	adc	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	1a f0       	brmi	.+6      	; 0x1ae <__fixunssfsi+0x24>
 1a8:	ba 95       	dec	r27
 1aa:	c9 f7       	brne	.-14     	; 0x19e <__fixunssfsi+0x14>
 1ac:	14 c0       	rjmp	.+40     	; 0x1d6 <__fixunssfsi+0x4c>
 1ae:	b1 30       	cpi	r27, 0x01	; 1
 1b0:	91 f0       	breq	.+36     	; 0x1d6 <__fixunssfsi+0x4c>
 1b2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__fp_zero>
 1b6:	b1 e0       	ldi	r27, 0x01	; 1
 1b8:	08 95       	ret
 1ba:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__fp_zero>
 1be:	67 2f       	mov	r22, r23
 1c0:	78 2f       	mov	r23, r24
 1c2:	88 27       	eor	r24, r24
 1c4:	b8 5f       	subi	r27, 0xF8	; 248
 1c6:	39 f0       	breq	.+14     	; 0x1d6 <__fixunssfsi+0x4c>
 1c8:	b9 3f       	cpi	r27, 0xF9	; 249
 1ca:	cc f3       	brlt	.-14     	; 0x1be <__fixunssfsi+0x34>
 1cc:	86 95       	lsr	r24
 1ce:	77 95       	ror	r23
 1d0:	67 95       	ror	r22
 1d2:	b3 95       	inc	r27
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <__fixunssfsi+0x42>
 1d6:	3e f4       	brtc	.+14     	; 0x1e6 <__fixunssfsi+0x5c>
 1d8:	90 95       	com	r25
 1da:	80 95       	com	r24
 1dc:	70 95       	com	r23
 1de:	61 95       	neg	r22
 1e0:	7f 4f       	sbci	r23, 0xFF	; 255
 1e2:	8f 4f       	sbci	r24, 0xFF	; 255
 1e4:	9f 4f       	sbci	r25, 0xFF	; 255
 1e6:	08 95       	ret

000001e8 <__floatunsisf>:
 1e8:	e8 94       	clt
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <__floatsisf+0x12>

000001ec <__floatsisf>:
 1ec:	97 fb       	bst	r25, 7
 1ee:	3e f4       	brtc	.+14     	; 0x1fe <__floatsisf+0x12>
 1f0:	90 95       	com	r25
 1f2:	80 95       	com	r24
 1f4:	70 95       	com	r23
 1f6:	61 95       	neg	r22
 1f8:	7f 4f       	sbci	r23, 0xFF	; 255
 1fa:	8f 4f       	sbci	r24, 0xFF	; 255
 1fc:	9f 4f       	sbci	r25, 0xFF	; 255
 1fe:	99 23       	and	r25, r25
 200:	a9 f0       	breq	.+42     	; 0x22c <__floatsisf+0x40>
 202:	f9 2f       	mov	r31, r25
 204:	96 e9       	ldi	r25, 0x96	; 150
 206:	bb 27       	eor	r27, r27
 208:	93 95       	inc	r25
 20a:	f6 95       	lsr	r31
 20c:	87 95       	ror	r24
 20e:	77 95       	ror	r23
 210:	67 95       	ror	r22
 212:	b7 95       	ror	r27
 214:	f1 11       	cpse	r31, r1
 216:	f8 cf       	rjmp	.-16     	; 0x208 <__floatsisf+0x1c>
 218:	fa f4       	brpl	.+62     	; 0x258 <__floatsisf+0x6c>
 21a:	bb 0f       	add	r27, r27
 21c:	11 f4       	brne	.+4      	; 0x222 <__floatsisf+0x36>
 21e:	60 ff       	sbrs	r22, 0
 220:	1b c0       	rjmp	.+54     	; 0x258 <__floatsisf+0x6c>
 222:	6f 5f       	subi	r22, 0xFF	; 255
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	8f 4f       	sbci	r24, 0xFF	; 255
 228:	9f 4f       	sbci	r25, 0xFF	; 255
 22a:	16 c0       	rjmp	.+44     	; 0x258 <__floatsisf+0x6c>
 22c:	88 23       	and	r24, r24
 22e:	11 f0       	breq	.+4      	; 0x234 <__floatsisf+0x48>
 230:	96 e9       	ldi	r25, 0x96	; 150
 232:	11 c0       	rjmp	.+34     	; 0x256 <__floatsisf+0x6a>
 234:	77 23       	and	r23, r23
 236:	21 f0       	breq	.+8      	; 0x240 <__floatsisf+0x54>
 238:	9e e8       	ldi	r25, 0x8E	; 142
 23a:	87 2f       	mov	r24, r23
 23c:	76 2f       	mov	r23, r22
 23e:	05 c0       	rjmp	.+10     	; 0x24a <__floatsisf+0x5e>
 240:	66 23       	and	r22, r22
 242:	71 f0       	breq	.+28     	; 0x260 <__floatsisf+0x74>
 244:	96 e8       	ldi	r25, 0x86	; 134
 246:	86 2f       	mov	r24, r22
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	2a f0       	brmi	.+10     	; 0x258 <__floatsisf+0x6c>
 24e:	9a 95       	dec	r25
 250:	66 0f       	add	r22, r22
 252:	77 1f       	adc	r23, r23
 254:	88 1f       	adc	r24, r24
 256:	da f7       	brpl	.-10     	; 0x24e <__floatsisf+0x62>
 258:	88 0f       	add	r24, r24
 25a:	96 95       	lsr	r25
 25c:	87 95       	ror	r24
 25e:	97 f9       	bld	r25, 7
 260:	08 95       	ret

00000262 <__fp_split3>:
 262:	57 fd       	sbrc	r21, 7
 264:	90 58       	subi	r25, 0x80	; 128
 266:	44 0f       	add	r20, r20
 268:	55 1f       	adc	r21, r21
 26a:	59 f0       	breq	.+22     	; 0x282 <__fp_splitA+0x10>
 26c:	5f 3f       	cpi	r21, 0xFF	; 255
 26e:	71 f0       	breq	.+28     	; 0x28c <__fp_splitA+0x1a>
 270:	47 95       	ror	r20

00000272 <__fp_splitA>:
 272:	88 0f       	add	r24, r24
 274:	97 fb       	bst	r25, 7
 276:	99 1f       	adc	r25, r25
 278:	61 f0       	breq	.+24     	; 0x292 <__fp_splitA+0x20>
 27a:	9f 3f       	cpi	r25, 0xFF	; 255
 27c:	79 f0       	breq	.+30     	; 0x29c <__fp_splitA+0x2a>
 27e:	87 95       	ror	r24
 280:	08 95       	ret
 282:	12 16       	cp	r1, r18
 284:	13 06       	cpc	r1, r19
 286:	14 06       	cpc	r1, r20
 288:	55 1f       	adc	r21, r21
 28a:	f2 cf       	rjmp	.-28     	; 0x270 <__fp_split3+0xe>
 28c:	46 95       	lsr	r20
 28e:	f1 df       	rcall	.-30     	; 0x272 <__fp_splitA>
 290:	08 c0       	rjmp	.+16     	; 0x2a2 <__fp_splitA+0x30>
 292:	16 16       	cp	r1, r22
 294:	17 06       	cpc	r1, r23
 296:	18 06       	cpc	r1, r24
 298:	99 1f       	adc	r25, r25
 29a:	f1 cf       	rjmp	.-30     	; 0x27e <__fp_splitA+0xc>
 29c:	86 95       	lsr	r24
 29e:	71 05       	cpc	r23, r1
 2a0:	61 05       	cpc	r22, r1
 2a2:	08 94       	sec
 2a4:	08 95       	ret

000002a6 <__fp_zero>:
 2a6:	e8 94       	clt

000002a8 <__fp_szero>:
 2a8:	bb 27       	eor	r27, r27
 2aa:	66 27       	eor	r22, r22
 2ac:	77 27       	eor	r23, r23
 2ae:	cb 01       	movw	r24, r22
 2b0:	97 f9       	bld	r25, 7
 2b2:	08 95       	ret

000002b4 <__mulsf3>:
 2b4:	0e 94 6d 01 	call	0x2da	; 0x2da <__mulsf3x>
 2b8:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__fp_round>
 2bc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__fp_pscA>
 2c0:	38 f0       	brcs	.+14     	; 0x2d0 <__mulsf3+0x1c>
 2c2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__fp_pscB>
 2c6:	20 f0       	brcs	.+8      	; 0x2d0 <__mulsf3+0x1c>
 2c8:	95 23       	and	r25, r21
 2ca:	11 f0       	breq	.+4      	; 0x2d0 <__mulsf3+0x1c>
 2cc:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__fp_inf>
 2d0:	0c 94 cd 01 	jmp	0x39a	; 0x39a <__fp_nan>
 2d4:	11 24       	eor	r1, r1
 2d6:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__fp_szero>

000002da <__mulsf3x>:
 2da:	0e 94 31 01 	call	0x262	; 0x262 <__fp_split3>
 2de:	70 f3       	brcs	.-36     	; 0x2bc <__mulsf3+0x8>

000002e0 <__mulsf3_pse>:
 2e0:	95 9f       	mul	r25, r21
 2e2:	c1 f3       	breq	.-16     	; 0x2d4 <__mulsf3+0x20>
 2e4:	95 0f       	add	r25, r21
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	55 1f       	adc	r21, r21
 2ea:	62 9f       	mul	r22, r18
 2ec:	f0 01       	movw	r30, r0
 2ee:	72 9f       	mul	r23, r18
 2f0:	bb 27       	eor	r27, r27
 2f2:	f0 0d       	add	r31, r0
 2f4:	b1 1d       	adc	r27, r1
 2f6:	63 9f       	mul	r22, r19
 2f8:	aa 27       	eor	r26, r26
 2fa:	f0 0d       	add	r31, r0
 2fc:	b1 1d       	adc	r27, r1
 2fe:	aa 1f       	adc	r26, r26
 300:	64 9f       	mul	r22, r20
 302:	66 27       	eor	r22, r22
 304:	b0 0d       	add	r27, r0
 306:	a1 1d       	adc	r26, r1
 308:	66 1f       	adc	r22, r22
 30a:	82 9f       	mul	r24, r18
 30c:	22 27       	eor	r18, r18
 30e:	b0 0d       	add	r27, r0
 310:	a1 1d       	adc	r26, r1
 312:	62 1f       	adc	r22, r18
 314:	73 9f       	mul	r23, r19
 316:	b0 0d       	add	r27, r0
 318:	a1 1d       	adc	r26, r1
 31a:	62 1f       	adc	r22, r18
 31c:	83 9f       	mul	r24, r19
 31e:	a0 0d       	add	r26, r0
 320:	61 1d       	adc	r22, r1
 322:	22 1f       	adc	r18, r18
 324:	74 9f       	mul	r23, r20
 326:	33 27       	eor	r19, r19
 328:	a0 0d       	add	r26, r0
 32a:	61 1d       	adc	r22, r1
 32c:	23 1f       	adc	r18, r19
 32e:	84 9f       	mul	r24, r20
 330:	60 0d       	add	r22, r0
 332:	21 1d       	adc	r18, r1
 334:	82 2f       	mov	r24, r18
 336:	76 2f       	mov	r23, r22
 338:	6a 2f       	mov	r22, r26
 33a:	11 24       	eor	r1, r1
 33c:	9f 57       	subi	r25, 0x7F	; 127
 33e:	50 40       	sbci	r21, 0x00	; 0
 340:	9a f0       	brmi	.+38     	; 0x368 <__mulsf3_pse+0x88>
 342:	f1 f0       	breq	.+60     	; 0x380 <__mulsf3_pse+0xa0>
 344:	88 23       	and	r24, r24
 346:	4a f0       	brmi	.+18     	; 0x35a <__mulsf3_pse+0x7a>
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	bb 1f       	adc	r27, r27
 34e:	66 1f       	adc	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	88 1f       	adc	r24, r24
 354:	91 50       	subi	r25, 0x01	; 1
 356:	50 40       	sbci	r21, 0x00	; 0
 358:	a9 f7       	brne	.-22     	; 0x344 <__mulsf3_pse+0x64>
 35a:	9e 3f       	cpi	r25, 0xFE	; 254
 35c:	51 05       	cpc	r21, r1
 35e:	80 f0       	brcs	.+32     	; 0x380 <__mulsf3_pse+0xa0>
 360:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__fp_inf>
 364:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__fp_szero>
 368:	5f 3f       	cpi	r21, 0xFF	; 255
 36a:	e4 f3       	brlt	.-8      	; 0x364 <__mulsf3_pse+0x84>
 36c:	98 3e       	cpi	r25, 0xE8	; 232
 36e:	d4 f3       	brlt	.-12     	; 0x364 <__mulsf3_pse+0x84>
 370:	86 95       	lsr	r24
 372:	77 95       	ror	r23
 374:	67 95       	ror	r22
 376:	b7 95       	ror	r27
 378:	f7 95       	ror	r31
 37a:	e7 95       	ror	r30
 37c:	9f 5f       	subi	r25, 0xFF	; 255
 37e:	c1 f7       	brne	.-16     	; 0x370 <__mulsf3_pse+0x90>
 380:	fe 2b       	or	r31, r30
 382:	88 0f       	add	r24, r24
 384:	91 1d       	adc	r25, r1
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	97 f9       	bld	r25, 7
 38c:	08 95       	ret

0000038e <__fp_inf>:
 38e:	97 f9       	bld	r25, 7
 390:	9f 67       	ori	r25, 0x7F	; 127
 392:	80 e8       	ldi	r24, 0x80	; 128
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	08 95       	ret

0000039a <__fp_nan>:
 39a:	9f ef       	ldi	r25, 0xFF	; 255
 39c:	80 ec       	ldi	r24, 0xC0	; 192
 39e:	08 95       	ret

000003a0 <__fp_pscA>:
 3a0:	00 24       	eor	r0, r0
 3a2:	0a 94       	dec	r0
 3a4:	16 16       	cp	r1, r22
 3a6:	17 06       	cpc	r1, r23
 3a8:	18 06       	cpc	r1, r24
 3aa:	09 06       	cpc	r0, r25
 3ac:	08 95       	ret

000003ae <__fp_pscB>:
 3ae:	00 24       	eor	r0, r0
 3b0:	0a 94       	dec	r0
 3b2:	12 16       	cp	r1, r18
 3b4:	13 06       	cpc	r1, r19
 3b6:	14 06       	cpc	r1, r20
 3b8:	05 06       	cpc	r0, r21
 3ba:	08 95       	ret

000003bc <__fp_round>:
 3bc:	09 2e       	mov	r0, r25
 3be:	03 94       	inc	r0
 3c0:	00 0c       	add	r0, r0
 3c2:	11 f4       	brne	.+4      	; 0x3c8 <__fp_round+0xc>
 3c4:	88 23       	and	r24, r24
 3c6:	52 f0       	brmi	.+20     	; 0x3dc <__fp_round+0x20>
 3c8:	bb 0f       	add	r27, r27
 3ca:	40 f4       	brcc	.+16     	; 0x3dc <__fp_round+0x20>
 3cc:	bf 2b       	or	r27, r31
 3ce:	11 f4       	brne	.+4      	; 0x3d4 <__fp_round+0x18>
 3d0:	60 ff       	sbrs	r22, 0
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <__fp_round+0x20>
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	8f 4f       	sbci	r24, 0xFF	; 255
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	08 95       	ret

000003de <__divmodhi4>:
 3de:	97 fb       	bst	r25, 7
 3e0:	07 2e       	mov	r0, r23
 3e2:	16 f4       	brtc	.+4      	; 0x3e8 <__divmodhi4+0xa>
 3e4:	00 94       	com	r0
 3e6:	07 d0       	rcall	.+14     	; 0x3f6 <__divmodhi4_neg1>
 3e8:	77 fd       	sbrc	r23, 7
 3ea:	09 d0       	rcall	.+18     	; 0x3fe <__divmodhi4_neg2>
 3ec:	0e 94 03 02 	call	0x406	; 0x406 <__udivmodhi4>
 3f0:	07 fc       	sbrc	r0, 7
 3f2:	05 d0       	rcall	.+10     	; 0x3fe <__divmodhi4_neg2>
 3f4:	3e f4       	brtc	.+14     	; 0x404 <__divmodhi4_exit>

000003f6 <__divmodhi4_neg1>:
 3f6:	90 95       	com	r25
 3f8:	81 95       	neg	r24
 3fa:	9f 4f       	sbci	r25, 0xFF	; 255
 3fc:	08 95       	ret

000003fe <__divmodhi4_neg2>:
 3fe:	70 95       	com	r23
 400:	61 95       	neg	r22
 402:	7f 4f       	sbci	r23, 0xFF	; 255

00000404 <__divmodhi4_exit>:
 404:	08 95       	ret

00000406 <__udivmodhi4>:
 406:	aa 1b       	sub	r26, r26
 408:	bb 1b       	sub	r27, r27
 40a:	51 e1       	ldi	r21, 0x11	; 17
 40c:	07 c0       	rjmp	.+14     	; 0x41c <__udivmodhi4_ep>

0000040e <__udivmodhi4_loop>:
 40e:	aa 1f       	adc	r26, r26
 410:	bb 1f       	adc	r27, r27
 412:	a6 17       	cp	r26, r22
 414:	b7 07       	cpc	r27, r23
 416:	10 f0       	brcs	.+4      	; 0x41c <__udivmodhi4_ep>
 418:	a6 1b       	sub	r26, r22
 41a:	b7 0b       	sbc	r27, r23

0000041c <__udivmodhi4_ep>:
 41c:	88 1f       	adc	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	5a 95       	dec	r21
 422:	a9 f7       	brne	.-22     	; 0x40e <__udivmodhi4_loop>
 424:	80 95       	com	r24
 426:	90 95       	com	r25
 428:	bc 01       	movw	r22, r24
 42a:	cd 01       	movw	r24, r26
 42c:	08 95       	ret

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
